using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace ATEMVisionSwitcher
{
    public partial class ProgramButton : UserControl
    {
        //NEW SECTION
        //public enum NameType { Short, Long, Id };

        //private Color _defaultColor = Color.White;
        //private Color _liveColor = Color.Red;
        //private List<Color> _liveMEColor = new List<Color> { Color.Aqua, Color.BlueViolet, Color.RoyalBlue, Color.Purple, Color.Teal, Color.Tomato };
        //private Color _subColor = Color.Yellow;

        //private Inputs _inputs;
        //private NameType _nameType;
        //private Feeds _feeds;

        ////Constructor
        //public ProgramButton()
        //{
        //    InitializeComponent();
        //}

        ////Set parameters
        //public void SetParameters(Inputs inputs, Feeds feeds, NameType nameType = NameType.Short)
        //{
        //    _inputs = inputs;
        //    _feeds = feeds;
        //    _nameType = nameType;
        //}
        //public void SetParameters(Inputs inputs, Feed feed, NameType nameType = NameType.Short)
        //{
        //    _inputs = inputs;
        //    _feeds = new Feeds(new List<Feed> { feed });
        //    _nameType = nameType;
        //}
        //public void SetParameters(Input input, DebugConsole debugConsole, Feeds feeds, NameType nameType = NameType.Short)
        //{
        //    _inputs = new Inputs(debugConsole, new List<Input> { input });
        //    _feeds = feeds;
        //    _nameType = nameType;
        //}
        //public void SetParameters(Input input, DebugConsole debugConsole, Feed feed, NameType nameType = NameType.Short)
        //{
        //    _inputs = new Inputs(debugConsole, new List<Input> { input });
        //    _feeds = new Feeds(new List<Feed> { feed });
        //    _nameType = nameType;
        //}
        //public void SetParameters(Inputs inputs, DebugConsole debugConsole, List<MixEffectBlock> mixEffectBlocks, NameType nameType = NameType.Short)
        //{
        //    _inputs = inputs;
        //    _feeds = new Feeds(new List<Feed> { new Feed("AutoGenerated", new MixEffectBlocks(debugConsole, mixEffectBlocks), new List<KeyerFeed> { }) });
        //    _nameType = nameType;
        //}
        //public void SetParameters(Inputs inputs, DebugConsole debugConsole, MixEffectBlock mixEffectBlock, NameType nameType = NameType.Short)
        //{
        //    _inputs = inputs;
        //    _feeds = new Feeds(new List<Feed> { new Feed("AutoGenerated", new MixEffectBlocks(debugConsole, mixEffectBlock), new List<KeyerFeed> { }) });
        //    _nameType = nameType;
        //}
        //public void SetParameters(Input input, DebugConsole debugConsole, List<MixEffectBlock> mixEffectBlocks, NameType nameType = NameType.Short)
        //{
        //    _inputs = new Inputs(debugConsole, new List<Input> { input });
        //    _feeds = new Feeds(new List<Feed> { new Feed("AutoGenerated", new MixEffectBlocks(debugConsole, mixEffectBlocks), new List<KeyerFeed> { }) });
        //    _nameType = nameType;
        //}
        //public void SetParameters(Input input, DebugConsole debugConsole, MixEffectBlock mixEffectBlock, NameType nameType = NameType.Short)
        //{
        //    _inputs = new Inputs(debugConsole, new List<Input> { input });
        //    _feeds = new Feeds(new List<Feed> { new Feed("AutoGenerated", new MixEffectBlocks(debugConsole, mixEffectBlock), new List<KeyerFeed> { }) });
        //    _nameType = nameType;
        //}

        //private void SelectedFeedChanged()
        //{

        //}

        public enum NameType { Short, Long, Id };

        private Color _defaultColor;
        private Color _liveColor;
        private List<Color> _liveMEColor;
        private Color _subColor;
        private SwitcherInput _input;
        private List<MixEffectBlock> _mixEffectBlocks;
        private NameType _nameType;
        private Feeds _feeds;

        public ProgramButton()
        {
            InitializeComponent();
            _mixEffectBlocks = new List<MixEffectBlock> { };
        }

        //Set the parameters for the element
        public void SetParameters(SwitcherInput input, MixEffectBlock mixEffectBlock, ATEM_VisionSwitcher switcher, NameType nameType = NameType.Short)
        {
            _input = input;
            _mixEffectBlocks = new List<MixEffectBlock> { mixEffectBlock };
            _nameType = nameType;

            _defaultColor = switcher.DefaultColor;
            _liveColor = switcher.LiveColor;
            _liveMEColor = switcher.LiveMEColor;
            _subColor = switcher.SubColor;

            AddEvents();
            SetText();
            UpdateStatus();
        }
        public void SetParameters(SwitcherInput input, List<MixEffectBlock> mixEffectBlocks, ATEM_VisionSwitcher switcher, NameType nameType = NameType.Short)
        {
            _input = input;
            _mixEffectBlocks = mixEffectBlocks;
            _nameType = nameType;

            _defaultColor = switcher.DefaultColor;
            _liveColor = switcher.LiveColor;
            _liveMEColor = switcher.LiveMEColor;
            _subColor = switcher.SubColor;

            AddEvents();
            SetText();
            UpdateStatus();
        }
        public void SetParameters(SwitcherInput input, Feeds feeds, ATEM_VisionSwitcher switcher, NameType nameType = NameType.Short)
        {
            _input = input;
            _feeds = feeds;
            _mixEffectBlocks = _feeds.SelectedFeed.MEBlocks.meBlocks;
            _feeds.SelectedFeedChanged += new EventHandler((s, a) => SelectedFeedChanged());
            _nameType = nameType;

            _defaultColor = switcher.DefaultColor;
            _liveColor = switcher.LiveColor;
            _liveMEColor = switcher.LiveMEColor;
            _subColor = switcher.SubColor;

            AddEvents();
            SetText();
            UpdateStatus();
        }
        public void SetParameters(SwitcherInput input, Feed feed, ATEM_VisionSwitcher switcher, NameType nameType = NameType.Short)
        {
            _input = input;
            _feeds = new Feeds(new List<Feed> { feed });
            _mixEffectBlocks = _feeds.SelectedFeed.MEBlocks.meBlocks;
            _feeds.SelectedFeedChanged += new EventHandler((s, a) => SelectedFeedChanged());
            _nameType = nameType;

            _defaultColor = switcher.DefaultColor;
            _liveColor = switcher.LiveColor;
            _liveMEColor = switcher.LiveMEColor;
            _subColor = switcher.SubColor;

            AddEvents();
            SetText();
            UpdateStatus();
        }

        //Selected feed has changed
        public void SelectedFeedChanged()
        {
            UpdateMixEffectBlock(_feeds.SelectedFeed.MEBlocks.meBlocks);
        }

        //Add the events
        private void AddEvents()
        {
            //Input events
            switch (_nameType)
            {
                case NameType.Long:
                    _input.Monitor.LongNameChanged += new EventHandler((s, a) => SetText());
                    break;
                case NameType.Short:
                    _input.Monitor.ShortNameChanged += new EventHandler((s, a) => SetText());
                    break;
            }

            UpdateMixEffectBlocks();
        }

        //Update the mix effect blocks
        private void UpdateMixEffectBlocks()
        {
            //Mix effect block events
            foreach (MixEffectBlock i in _mixEffectBlocks)
            {
                i.Monitor.ProgramInput += new EventHandler((s, a) => UpdateStatus());
            }
        }

        //Update the buttons text
        private void SetText()
        {
            switch (_nameType)
            {
                case NameType.Id:
                    button.Text = _input.Id.ToString();
                    break;
                case NameType.Long:
                    button.Text = _input.LongName;
                    break;
                case NameType.Short:
                    button.Text = _input.ShortName;
                    break;
            }
        }

        //Update the button's status (backcolor)
        private void UpdateStatus()
        {
            Color colorToSet = _defaultColor;

            int liveOn = 0;
            int index = 0;
            foreach (MixEffectBlock i in _mixEffectBlocks)
            {

                //Only 1 ME
                if (_mixEffectBlocks.Count == 1)
                {
                    if (i.ProgramInput == _input) { colorToSet = _liveColor; }
                }

                //Multiple MEs
                else
                {
                    if (liveOn > 0)
                    {
                        if (i.ProgramInput == _input)
                        {
                            liveOn++;

                            //Live on all MEs
                            if (_mixEffectBlocks.Count == liveOn)
                            {
                                colorToSet = _liveColor;
                            }
                            //Live on some
                            else
                            {
                                colorToSet = _subColor;
                            }
                        }
                    }
                    else if (i.ProgramInput == _input)
                    {
                        //Live on a single ME in multiple
                        liveOn++;
                        colorToSet = _liveMEColor[index];
                    }

                    index++;
                }
            }

            button.BackColor = colorToSet;
        }

        //Set the input on the ME(s) preview
        private void button_Click(object sender, EventArgs e)
        {
            foreach (MixEffectBlock i in _mixEffectBlocks)
            {
                i.ProgramInput = _input;
            }
        }

        //Update the parameters for the element
        public void UpdateMixEffectBlock(MixEffectBlock mixEffectBlock)
        {
            _mixEffectBlocks = new List<MixEffectBlock> { mixEffectBlock };
            UpdateMixEffectBlocks();
            SetText();
            UpdateStatus();
        }

        //Update the parameters for the element
        public void UpdateMixEffectBlock(List<MixEffectBlock> mixEffectBlock)
        {
            _mixEffectBlocks = mixEffectBlock;
            UpdateMixEffectBlocks();
            SetText();
            UpdateStatus();
        }

        //Set a custom color
        public void SetCustomColor(ATEM_VisionSwitcher.ColorType colorType, Color color)
        {
            switch (colorType)
            {
                case ATEM_VisionSwitcher.ColorType.Default:
                    _defaultColor = color;
                    break;
                case ATEM_VisionSwitcher.ColorType.Live:
                    _liveColor = color;
                    break;
                case ATEM_VisionSwitcher.ColorType.Sub:
                    _subColor = color;
                    break;
            }
        }

        //Set a custom color
        public void SetCustomColor(ATEM_VisionSwitcher.ColorType colorType, List<Color> color)
        {
            switch (colorType)
            {
                case ATEM_VisionSwitcher.ColorType.LiveME:
                    _liveMEColor = color;
                    break;
            }
        }

    }
}
